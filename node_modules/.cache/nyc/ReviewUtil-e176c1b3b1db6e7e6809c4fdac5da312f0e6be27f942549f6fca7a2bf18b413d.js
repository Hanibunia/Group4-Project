function cov_1ypd14m2lf(){var path="E:\\vs studio code\\devops\\Group4-Project\\utils\\ReviewUtil.js";var hash="443cb6d1401a44b6989e6e032ab37a767c51bc75";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\vs studio code\\devops\\Group4-Project\\utils\\ReviewUtil.js",statementMap:{"0":{start:{line:1,column:19},end:{line:1,column:46}},"1":{start:{line:2,column:11},end:{line:2,column:33}},"2":{start:{line:3,column:23},end:{line:3,column:38}},"3":{start:{line:6,column:4},end:{line:14,column:5}},"4":{start:{line:7,column:21},end:{line:7,column:56}},"5":{start:{line:8,column:25},end:{line:8,column:41}},"6":{start:{line:10,column:8},end:{line:10,column:24}},"7":{start:{line:12,column:8},end:{line:12,column:27}},"8":{start:{line:13,column:8},end:{line:13,column:18}},"9":{start:{line:18,column:4},end:{line:23,column:52}},"10":{start:{line:19,column:27},end:{line:19,column:51}},"11":{start:{line:20,column:8},end:{line:20,column:32}},"12":{start:{line:21,column:8},end:{line:21,column:73}},"13":{start:{line:22,column:8},end:{line:22,column:26}},"14":{start:{line:23,column:20},end:{line:23,column:39}},"15":{start:{line:23,column:40},end:{line:23,column:50}},"16":{start:{line:70,column:4},end:{line:99,column:5}},"17":{start:{line:71,column:22},end:{line:71,column:36}},"18":{start:{line:72,column:39},end:{line:72,column:47}},"19":{start:{line:75,column:27},end:{line:75,column:55}},"20":{start:{line:76,column:8},end:{line:78,column:9}},"21":{start:{line:77,column:12},end:{line:77,column:109}},"22":{start:{line:80,column:25},end:{line:80,column:59}},"23":{start:{line:81,column:27},end:{line:81,column:70}},"24":{start:{line:81,column:49},end:{line:81,column:69}},"25":{start:{line:83,column:8},end:{line:95,column:9}},"26":{start:{line:84,column:29},end:{line:84,column:37}},"27":{start:{line:85,column:27},end:{line:85,column:74}},"28":{start:{line:86,column:31},end:{line:86,column:67}},"29":{start:{line:87,column:12},end:{line:87,column:36}},"30":{start:{line:90,column:12},end:{line:90,column:62}},"31":{start:{line:92,column:12},end:{line:92,column:84}},"32":{start:{line:92,column:60},end:{line:92,column:81}},"33":{start:{line:94,column:12},end:{line:94,column:64}},"34":{start:{line:97,column:8},end:{line:97,column:51}},"35":{start:{line:98,column:8},end:{line:98,column:67}},"36":{start:{line:104,column:4},end:{line:144,column:5}},"37":{start:{line:105,column:8},end:{line:105,column:48}},"38":{start:{line:106,column:22},end:{line:106,column:36}},"39":{start:{line:107,column:49},end:{line:107,column:57}},"40":{start:{line:110,column:27},end:{line:110,column:55}},"41":{start:{line:111,column:8},end:{line:114,column:9}},"42":{start:{line:112,column:12},end:{line:112,column:56}},"43":{start:{line:113,column:12},end:{line:113,column:85}},"44":{start:{line:116,column:27},end:{line:116,column:63}},"45":{start:{line:117,column:8},end:{line:117,column:59}},"46":{start:{line:120,column:28},end:{line:122,column:9}},"47":{start:{line:121,column:21},end:{line:121,column:73}},"48":{start:{line:124,column:8},end:{line:124,column:50}},"49":{start:{line:127,column:8},end:{line:140,column:9}},"50":{start:{line:129,column:12},end:{line:129,column:60}},"51":{start:{line:130,column:12},end:{line:130,column:52}},"52":{start:{line:133,column:12},end:{line:133,column:90}},"53":{start:{line:134,column:12},end:{line:134,column:79}},"54":{start:{line:136,column:12},end:{line:136,column:58}},"55":{start:{line:138,column:12},end:{line:138,column:59}},"56":{start:{line:139,column:12},end:{line:139,column:79}},"57":{start:{line:142,column:8},end:{line:142,column:51}},"58":{start:{line:143,column:8},end:{line:143,column:67}},"59":{start:{line:193,column:0},end:{line:195,column:2}}},fnMap:{"0":{name:"readJSON",decl:{start:{line:5,column:15},end:{line:5,column:23}},loc:{start:{line:5,column:34},end:{line:15,column:1}},line:5},"1":{name:"writeJSON",decl:{start:{line:17,column:15},end:{line:17,column:24}},loc:{start:{line:17,column:43},end:{line:24,column:1}},line:17},"2":{name:"addReview",decl:{start:{line:69,column:15},end:{line:69,column:24}},loc:{start:{line:69,column:35},end:{line:100,column:1}},line:69},"3":{name:"(anonymous_3)",decl:{start:{line:81,column:41},end:{line:81,column:42}},loc:{start:{line:81,column:49},end:{line:81,column:69}},line:81},"4":{name:"(anonymous_4)",decl:{start:{line:92,column:51},end:{line:92,column:52}},loc:{start:{line:92,column:60},end:{line:92,column:81}},line:92},"5":{name:"updateReview",decl:{start:{line:103,column:15},end:{line:103,column:27}},loc:{start:{line:103,column:38},end:{line:145,column:1}},line:103},"6":{name:"(anonymous_6)",decl:{start:{line:121,column:12},end:{line:121,column:13}},loc:{start:{line:121,column:21},end:{line:121,column:73}},line:121}},branchMap:{"0":{loc:{start:{line:76,column:8},end:{line:78,column:9}},type:"if",locations:[{start:{line:76,column:8},end:{line:78,column:9}},{start:{line:76,column:8},end:{line:78,column:9}}],line:76},"1":{loc:{start:{line:76,column:12},end:{line:76,column:132}},type:"binary-expr",locations:[{start:{line:76,column:12},end:{line:76,column:18}},{start:{line:76,column:22},end:{line:76,column:45}},{start:{line:76,column:49},end:{line:76,column:62}},{start:{line:76,column:66},end:{line:76,column:76}},{start:{line:76,column:80},end:{line:76,column:90}},{start:{line:76,column:94},end:{line:76,column:105}},{start:{line:76,column:109},end:{line:76,column:132}}],line:76},"2":{loc:{start:{line:83,column:8},end:{line:95,column:9}},type:"if",locations:[{start:{line:83,column:8},end:{line:95,column:9}},{start:{line:83,column:8},end:{line:95,column:9}}],line:83},"3":{loc:{start:{line:111,column:8},end:{line:114,column:9}},type:"if",locations:[{start:{line:111,column:8},end:{line:114,column:9}},{start:{line:111,column:8},end:{line:114,column:9}}],line:111},"4":{loc:{start:{line:111,column:12},end:{line:111,column:130}},type:"binary-expr",locations:[{start:{line:111,column:12},end:{line:111,column:18}},{start:{line:111,column:22},end:{line:111,column:31}},{start:{line:111,column:35},end:{line:111,column:58}},{start:{line:111,column:62},end:{line:111,column:75}},{start:{line:111,column:79},end:{line:111,column:89}},{start:{line:111,column:93},end:{line:111,column:103}},{start:{line:111,column:107},end:{line:111,column:130}}],line:111},"5":{loc:{start:{line:121,column:21},end:{line:121,column:73}},type:"binary-expr",locations:[{start:{line:121,column:21},end:{line:121,column:42}},{start:{line:121,column:46},end:{line:121,column:73}}],line:121},"6":{loc:{start:{line:127,column:8},end:{line:140,column:9}},type:"if",locations:[{start:{line:127,column:8},end:{line:140,column:9}},{start:{line:127,column:8},end:{line:140,column:9}}],line:127}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0,0,0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0,0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"443cb6d1401a44b6989e6e032ab37a767c51bc75"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ypd14m2lf=function(){return actualCoverage;};}return actualCoverage;}cov_1ypd14m2lf();const{Review}=(cov_1ypd14m2lf().s[0]++,require('../models/Review'));const fs=(cov_1ypd14m2lf().s[1]++,require('fs').promises);const{v4:uuidv4}=(cov_1ypd14m2lf().s[2]++,require('uuid'));async function readJSON(filename){cov_1ypd14m2lf().f[0]++;cov_1ypd14m2lf().s[3]++;try{const data=(cov_1ypd14m2lf().s[4]++,await fs.readFile(filename,'utf8'));const allUsers=(cov_1ypd14m2lf().s[5]++,JSON.parse(data));//console.log("Loaded users from file:", allUsers); // Add this line for debugging
cov_1ypd14m2lf().s[6]++;return allUsers;}catch(err){cov_1ypd14m2lf().s[7]++;console.error(err);cov_1ypd14m2lf().s[8]++;throw err;}}// @ignore-class-method writeJSON
async function writeJSON(object,filename){cov_1ypd14m2lf().f[1]++;cov_1ypd14m2lf().s[9]++;try{const allObjects=(cov_1ypd14m2lf().s[10]++,await readJSON(filename));cov_1ypd14m2lf().s[11]++;allObjects.push(object);cov_1ypd14m2lf().s[12]++;await fs.writeFile(filename,JSON.stringify(allObjects),'utf8');cov_1ypd14m2lf().s[13]++;return allObjects;}catch(err){cov_1ypd14m2lf().s[14]++;console.error(err);cov_1ypd14m2lf().s[15]++;throw err;}}// async function viewReview(req, res) {
//     try {
//         const userEmail = req.params.userEmail;
//         if (!userEmail) {
//             return res.status(400).json({ message: 'Invalid data: Missing user email' });
//         }
//         const allReviews = await readJSON('utils/reviews.json');
//         const userReviews = allReviews.filter(entry => entry.userEmail === userEmail);
//         if (userReviews.length > 0) {
//             res.status(200).json(userReviews);
//         } else {
//             res.status(404).json({ message: 'No reviews found for the user' });
//         }
//     } catch (error) {
//         console.error('An error occurred:', error);
//         res.status(500).json({ message: 'Internal server error' });
//     }
// }
// async function viewAllReviews(req, res) {
//     try {
//         // Read all reviews from the file
//         const allReviews = await readJSON('utils/reviews.json');
//         // Check if there are any reviews
//         if (allReviews.length > 0) {
//             res.status(200).json(allReviews);
//         } else {
//             res.status(404).json({ message: 'No reviews found' });
//         }
//     } catch (error) {
//         console.error('An error occurred:', error);
//         res.status(500).json({ message: 'Internal server error' });
//     }
// }
async function addReview(req,res){cov_1ypd14m2lf().f[2]++;cov_1ypd14m2lf().s[16]++;try{const email=(cov_1ypd14m2lf().s[17]++,req.body.email);const{reviewText,rating}=(cov_1ypd14m2lf().s[18]++,req.body);// Enhanced input validation
const emailRegex=(cov_1ypd14m2lf().s[19]++,/^[^\s@]+@[^\s@]+\.[^\s@]+$/);cov_1ypd14m2lf().s[20]++;if((cov_1ypd14m2lf().b[1][0]++,!email)||(cov_1ypd14m2lf().b[1][1]++,!emailRegex.test(email))||(cov_1ypd14m2lf().b[1][2]++,isNaN(rating))||(cov_1ypd14m2lf().b[1][3]++,rating<1)||(cov_1ypd14m2lf().b[1][4]++,rating>5)||(cov_1ypd14m2lf().b[1][5]++,!reviewText)||(cov_1ypd14m2lf().b[1][6]++,reviewText.length>500)){cov_1ypd14m2lf().b[0][0]++;cov_1ypd14m2lf().s[21]++;return res.status(400).json({message:'Invalid data: Invalid email format or missing fields'});}else{cov_1ypd14m2lf().b[0][1]++;}const allUsers=(cov_1ypd14m2lf().s[22]++,await readJSON('utils/users.json'));const userExists=(cov_1ypd14m2lf().s[23]++,allUsers.some(user=>{cov_1ypd14m2lf().f[3]++;cov_1ypd14m2lf().s[24]++;return user.email===email;}));cov_1ypd14m2lf().s[25]++;if(userExists){cov_1ypd14m2lf().b[2][0]++;const reviewId=(cov_1ypd14m2lf().s[26]++,uuidv4());// Generate a unique identifier
const review=(cov_1ypd14m2lf().s[27]++,new Review(reviewId,email,reviewText,rating));const allReviews=(cov_1ypd14m2lf().s[28]++,await readJSON('utils/reviews.json'));cov_1ypd14m2lf().s[29]++;allReviews.push(review);// Use writeJSON to update the 'utils/reviews.json' file
cov_1ypd14m2lf().s[30]++;await writeJSON(allReviews,'utils/reviews.json');cov_1ypd14m2lf().s[31]++;res.status(201).json(allReviews.filter(entry=>{cov_1ypd14m2lf().f[4]++;cov_1ypd14m2lf().s[32]++;return entry.email===email;}));}else{cov_1ypd14m2lf().b[2][1]++;cov_1ypd14m2lf().s[33]++;res.status(404).json({message:'User not found'});}}catch(error){cov_1ypd14m2lf().s[34]++;console.error('An error occurred:',error);cov_1ypd14m2lf().s[35]++;res.status(500).json({message:'Internal server error'});}}async function updateReview(req,res){cov_1ypd14m2lf().f[5]++;cov_1ypd14m2lf().s[36]++;try{cov_1ypd14m2lf().s[37]++;console.log('Before reading JSON file');const email=(cov_1ypd14m2lf().s[38]++,req.body.email);const{reviewId,reviewText,rating}=(cov_1ypd14m2lf().s[39]++,req.body);// Enhanced input validation
const emailRegex=(cov_1ypd14m2lf().s[40]++,/^[^\s@]+@[^\s@]+\.[^\s@]+$/);cov_1ypd14m2lf().s[41]++;if((cov_1ypd14m2lf().b[4][0]++,!email)||(cov_1ypd14m2lf().b[4][1]++,!reviewId)||(cov_1ypd14m2lf().b[4][2]++,!emailRegex.test(email))||(cov_1ypd14m2lf().b[4][3]++,isNaN(rating))||(cov_1ypd14m2lf().b[4][4]++,rating<1)||(cov_1ypd14m2lf().b[4][5]++,rating>5)||(cov_1ypd14m2lf().b[4][6]++,reviewText.length>500)){cov_1ypd14m2lf().b[3][0]++;cov_1ypd14m2lf().s[42]++;console.log('Invalid data: Missing fields');cov_1ypd14m2lf().s[43]++;return res.status(400).json({message:'Invalid data: Missing fields'});}else{cov_1ypd14m2lf().b[3][1]++;}const allReviews=(cov_1ypd14m2lf().s[44]++,await readJSON('utils/reviews.json'));cov_1ypd14m2lf().s[45]++;console.log('After reading JSON file',allReviews);// Find the index of the review to be updated based on user email and reviewId
const reviewIndex=(cov_1ypd14m2lf().s[46]++,allReviews.findIndex(entry=>{cov_1ypd14m2lf().f[6]++;cov_1ypd14m2lf().s[47]++;return(cov_1ypd14m2lf().b[5][0]++,entry.email===email)&&(cov_1ypd14m2lf().b[5][1]++,entry.reviewId===reviewId);}));cov_1ypd14m2lf().s[48]++;console.log('Review index:',reviewIndex);// Check if the review is found
cov_1ypd14m2lf().s[49]++;if(reviewIndex!==-1){cov_1ypd14m2lf().b[6][0]++;cov_1ypd14m2lf().s[50]++;// Update the review with the new information
allReviews[reviewIndex].reviewText=reviewText;cov_1ypd14m2lf().s[51]++;allReviews[reviewIndex].rating=rating;// Rewrite the updated data back to the JSON file
cov_1ypd14m2lf().s[52]++;await fs.writeFile('utils/reviews.json',JSON.stringify(allReviews),'utf-8');cov_1ypd14m2lf().s[53]++;console.log('After writing updated data to JSON file',allReviews);cov_1ypd14m2lf().s[54]++;res.status(200).json(allReviews[reviewIndex]);}else{cov_1ypd14m2lf().b[6][1]++;cov_1ypd14m2lf().s[55]++;console.error('Review not found for the user');cov_1ypd14m2lf().s[56]++;res.status(404).json({message:'Review not found for the user'});}}catch(error){cov_1ypd14m2lf().s[57]++;console.error('An error occurred:',error);cov_1ypd14m2lf().s[58]++;res.status(500).json({message:'Internal server error'});}}// async function deleteReview(req, res) {
//     try {
//         const email = req.body.email;
//         const { reviewId } = req.body;
//         // Enhanced input validation
//         const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
//         if (!email || !emailRegex.test(email) || !reviewId) {
//             return res.status(400).json({ message: 'Invalid data: Invalid email format or missing fields' });
//         }
//         const allUsers = await readJSON('utils/users.json');
//         const userExists = allUsers.some(user => user.email === email);
//         if (userExists) {
//             const allReviews = await readJSON('utils/reviews.json');
//             // Find the index of the review to be deleted based on user email and reviewId
//             const reviewIndex = allReviews.findIndex(
//                 entry => entry.email === email && entry.reviewId === reviewId
//             );
//             // Check if the review is found
//             if (reviewIndex !== -1) {
//                 // Remove the review from the array
//                 const deletedReview = allReviews.splice(reviewIndex, 1)[0];
//                 // Rewrite the updated data back to the JSON file
//                 await writeJSON(allReviews, 'utils/reviews.json');
//                 res.status(200).json('Review has been successfully deleted');
//             } else {
//                 res.status(404).json({ message: 'Review not found for the user' });
//             }
//         } else {
//             res.status(404).json({ message: 'User not found' });
//         }
//     } catch (error) {
//         console.error('An error occurred:', error);
//         res.status(500).json({ message: 'Internal server error' });
//     }
// }
cov_1ypd14m2lf().s[59]++;module.exports={readJSON,writeJSON,addReview,updateReview};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,